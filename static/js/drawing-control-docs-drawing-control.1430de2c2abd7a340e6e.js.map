{"version":3,"sources":["webpack:///./src/drawing-control/DrawingControlEvent.ts","webpack:///./src/drawing-control/DrawingControl.ts","webpack:///./src/drawing-control/__docs__/DrawingControl.mdx","webpack:///./src/internal/useMemoOnce.ts","webpack:///./src/internal/useUpdateEffect.ts"],"names":["DrawingControlEvent","DrawingControl","_ref","_ref$position","position","_ref$drawingModes","drawingModes","onCircleComplete","onMarkerComplete","onOverlayComplete","onPolygonComplete","onPolylineComplete","onRectangleComplete","map","useGoogleMap","maps","useGoogleMapsAPI","options","useDeepCompareMemo","drawingControl","drawingControlOptions","ControlPosition","x","drawing","OverlayType","manager","useMemoOnce","DrawingManager","useEffect","setMap","useUpdateEffect","setOptions","useEventHandlers","_onOverlayComplete","_x","apply","this","arguments","toString","event","overlay","__webpack_require__","d","__webpack_exports__","displayName","__docgenInfo","description","props","defaultValue","name","required","type","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","MDXContent","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","id","parentName","href","docz__WEBPACK_IMPORTED_MODULE_2__","__codesandbox","__position","__code","__scope","DocsMap","_docs_DocsComponents__WEBPACK_IMPORTED_MODULE_3__","zoom","center","lat","lng","_DrawingControl__WEBPACK_IMPORTED_MODULE_4__","alert","console","log","of","react__WEBPACK_IMPORTED_MODULE_0__","factory","ref","useRef","current","fn","inputs","mounted"],"mappings":"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","file":"static/js/drawing-control-docs-drawing-control.a8fcebe3.js","sourcesContent":["export enum DrawingControlEvent {\n  onCircleComplete = \"circlecomplete\",\n  onMarkerComplete = \"markercomplete\",\n  onOverlayComplete = \"overlaycomplete\",\n  onPolygonComplete = \"polygoncomplete\",\n  onPolylineComplete = \"polylinecomplete\",\n  onRectangleComplete = \"rectanglecomplete\",\n}\n","import { useEffect } from \"react\";\n\nimport { useGoogleMap, useGoogleMapsAPI } from \"../context/GoogleMapsContext\";\nimport { useDeepCompareMemo } from \"../internal/useDeepCompareMemo\";\nimport { useEventHandlers } from \"../internal/useEventHandlers\";\nimport { useMemoOnce } from \"../internal/useMemoOnce\";\nimport { useUpdateEffect } from \"../internal/useUpdateEffect\";\nimport { DrawingControlEvent } from \"./DrawingControlEvent\";\n\nexport interface DrawingControlProps {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   */\n  position?: keyof typeof google.maps.ControlPosition;\n\n  /**\n   * The drawing modes to display in the drawing control, in the order in\n   * which they are to be displayed.\n   *\n   * The hand icon (which corresponds to the null drawing mode)\n   * is always available and is not to be specified in this array.\n   */\n  drawingModes?: Array<\n    \"CIRCLE\" | \"MARKER\" | \"POLYGON\" | \"POLYLINE\" | \"RECTANGLE\"\n  >;\n\n  /**\n   * This handler is called when the user has finished drawing a `circle`.\n   */\n  onCircleComplete?(): void;\n\n  /**\n   * This handler is called when the user has finished drawing a `marker`.\n   */\n  onMarkerComplete?(): void;\n\n  /**\n   * This handler is called when the user has finished drawing an `overlay`\n   * of any type.\n   */\n  onOverlayComplete?(event: google.maps.drawing.OverlayCompleteEvent): void;\n\n  /**\n   * This handler is called when the user has finished drawing a `polygon`.\n   */\n  onPolygonComplete?(): void;\n\n  /**\n   * This handler is called when the user has finished drawing a `polyline`.\n   */\n  onPolylineComplete?(): void;\n\n  /**\n   * This handler is called when the user has finished drawing a `rectangle`.\n   */\n  onRectangleComplete?(): void;\n}\n\ntype Handlers = Pick<\n  DrawingControlProps,\n  | \"onCircleComplete\"\n  | \"onMarkerComplete\"\n  | \"onOverlayComplete\"\n  | \"onPolygonComplete\"\n  | \"onPolylineComplete\"\n  | \"onRectangleComplete\"\n>;\n\nexport function DrawingControl({\n  position = \"TOP_LEFT\",\n  drawingModes = [\"CIRCLE\", \"MARKER\", \"POLYGON\", \"POLYLINE\", \"RECTANGLE\"],\n\n  onCircleComplete,\n  onMarkerComplete,\n  onOverlayComplete,\n  onPolygonComplete,\n  onPolylineComplete,\n  onRectangleComplete,\n}: DrawingControlProps): null {\n  const map = useGoogleMap();\n  const maps = useGoogleMapsAPI();\n  const options = useDeepCompareMemo(\n    () => ({\n      drawingControl: true,\n      drawingControlOptions: {\n        position: maps.ControlPosition[position],\n        drawingModes: drawingModes.map(x => maps.drawing.OverlayType[x]),\n      },\n    }),\n    [position, drawingModes],\n  );\n  const manager = useMemoOnce<google.maps.drawing.DrawingManager>(\n    () => new maps.drawing.DrawingManager(options),\n  );\n\n  useEffect(() => {\n    manager.setMap(map);\n\n    return () => {\n      manager.setMap(null);\n    };\n  }, []);\n\n  useUpdateEffect(() => {\n    manager.setOptions(options);\n  }, [options]);\n\n  useEventHandlers<Handlers>(manager, DrawingControlEvent, {\n    onCircleComplete,\n    onMarkerComplete,\n    onPolygonComplete,\n    onPolylineComplete,\n    onRectangleComplete,\n\n    onOverlayComplete(event) {\n      event.overlay.setMap(null);\n\n      if (onOverlayComplete) {\n        onOverlayComplete(event);\n      }\n    },\n  });\n\n  return null;\n}\ntry {\n    // @ts-ignore\n    DrawingControl.displayName = \"DrawingControl\";\n    // @ts-ignore\n    DrawingControl.__docgenInfo = { \"description\": \"\", \"displayName\": \"DrawingControl\", \"props\": { \"position\": { \"defaultValue\": null, \"description\": \"Position id. Used to specify the position of the control on the map.\", \"name\": \"position\", \"required\": false, \"type\": { \"name\": \"\\\"BOTTOM_CENTER\\\" | \\\"BOTTOM_LEFT\\\" | \\\"BOTTOM_RIGHT\\\" | \\\"LEFT_BOTTOM\\\" | \\\"LEFT_CENTER\\\" | \\\"LEFT_TOP\\\" | \\\"RIGHT_BOTTOM\\\" | \\\"RIGHT_CENTER\\\" | \\\"RIGHT_TOP\\\" | \\\"TOP_CENTER\\\" | \\\"TOP_LEFT\\\" | \\\"TOP_RIGHT\\\"\" } }, \"drawingModes\": { \"defaultValue\": null, \"description\": \"The drawing modes to display in the drawing control, in the order in\\nwhich they are to be displayed.\\n\\nThe hand icon (which corresponds to the null drawing mode)\\nis always available and is not to be specified in this array.\", \"name\": \"drawingModes\", \"required\": false, \"type\": { \"name\": \"(\\\"CIRCLE\\\" | \\\"MARKER\\\" | \\\"POLYGON\\\" | \\\"POLYLINE\\\" | \\\"RECTANGLE\\\")[]\" } }, \"onCircleComplete\": { \"defaultValue\": null, \"description\": \"This handler is called when the user has finished drawing a `circle`.\", \"name\": \"onCircleComplete\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onMarkerComplete\": { \"defaultValue\": null, \"description\": \"This handler is called when the user has finished drawing a `marker`.\", \"name\": \"onMarkerComplete\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onOverlayComplete\": { \"defaultValue\": null, \"description\": \"This handler is called when the user has finished drawing an `overlay`\\nof any type.\", \"name\": \"onOverlayComplete\", \"required\": false, \"type\": { \"name\": \"(event: OverlayCompleteEvent) => void\" } }, \"onPolygonComplete\": { \"defaultValue\": null, \"description\": \"This handler is called when the user has finished drawing a `polygon`.\", \"name\": \"onPolygonComplete\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onPolylineComplete\": { \"defaultValue\": null, \"description\": \"This handler is called when the user has finished drawing a `polyline`.\", \"name\": \"onPolylineComplete\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onRectangleComplete\": { \"defaultValue\": null, \"description\": \"This handler is called when the user has finished drawing a `rectangle`.\", \"name\": \"onRectangleComplete\", \"required\": false, \"type\": { \"name\": \"() => void\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/drawing-control/DrawingControl.ts#DrawingControl\"] = { docgenInfo: DrawingControl.__docgenInfo, name: \"DrawingControl\", path: \"src/drawing-control/DrawingControl.ts#DrawingControl\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from \"docz\";\nimport { DocsMap } from \"../../__docs__/DocsComponents\";\nimport { DrawingControl } from \"../DrawingControl\";\n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"custom-control\"}}>{`Custom Control`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Controls display options of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`google.maps.drawing.DrawingManager`}</MDXTag>{` control.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Google Maps Docs:`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://developers.google.com/maps/documentation/javascript/examples/control-custom\"}}>{`Custom Controls`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://developers.google.com/maps/documentation/javascript/reference#ControlPosition\"}}>{`google.maps.ControlPosition`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://developers.google.com/maps/documentation/javascript/3.exp/reference#DrawingManager\"}}>{`google.maps.drawing.DrawingManager`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://developers.google.com/maps/documentation/javascript/3.exp/reference#DrawingManagerOptions\"}}>{`google.maps.drawing.DrawingManagerOptions`}</MDXTag></MDXTag>\n</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<DocsMap zoom={8} center={{ lat: 36, lng: -122 }}>\\n  <DrawingControl\\n    position=\\\"BOTTOM_CENTER\\\"\\n    drawingModes={[\\'CIRCLE\\', \\'MARKER\\', \\'POLYGON\\', \\'POLYLINE\\', \\'RECTANGLE\\']}\\n    onOverlayComplete={event => {\\n      alert(\\'Check console\\')\\n      console.log(event)\\n    }}\\n  />\\n</DocsMap>'} __scope={{props: this ? this.props : props,DocsMap,DrawingControl}}>\n  <DocsMap\n    zoom={8}\n    center={{ lat: 36, lng: -122 }}\n  >\n    <DrawingControl\n      position=\"BOTTOM_CENTER\"\n      drawingModes={['CIRCLE', 'MARKER', 'POLYGON', 'POLYLINE', 'RECTANGLE']}\n      onOverlayComplete={(event) => {\n        alert('Check console');\n    console.log(event)\n  }}\n/>\n  </DocsMap>\n</Playground>\n<PropsTable of={DrawingControl} />\n           </MDXTag>\n  }\n}\n  ","import { useRef } from \"react\";\n\nexport function useMemoOnce<T>(factory: () => T): T {\n  const ref = useRef<null | T>(null);\n\n  if (!ref.current) {\n    ref.current = factory();\n  }\n\n  return ref.current;\n}\ntry {\n    // @ts-ignore\n    useMemoOnce.displayName = \"useMemoOnce\";\n    // @ts-ignore\n    useMemoOnce.__docgenInfo = { \"description\": \"\", \"displayName\": \"useMemoOnce\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/internal/useMemoOnce.ts#useMemoOnce\"] = { docgenInfo: useMemoOnce.__docgenInfo, name: \"useMemoOnce\", path: \"src/internal/useMemoOnce.ts#useMemoOnce\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { EffectCallback, InputIdentityList, useEffect, useRef } from \"react\";\n\nexport function useUpdateEffect(\n  fn: EffectCallback,\n  inputs: InputIdentityList,\n): void {\n  const mounted = useRef(false);\n\n  useEffect(() => {\n    if (!mounted.current) {\n      mounted.current = true;\n\n      return;\n    }\n\n    return fn();\n  }, inputs);\n}\n"],"sourceRoot":""}