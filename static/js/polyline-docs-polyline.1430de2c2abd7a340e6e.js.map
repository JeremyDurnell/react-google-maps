{"version":3,"sources":["webpack:///./src/internal/useMemoOnce.ts","webpack:///./src/polyline/PolylineEvent.ts","webpack:///./src/polyline/Polyline.ts","webpack:///./src/polyline/__docs__/Polyline.mdx"],"names":["__webpack_require__","d","__webpack_exports__","useMemoOnce","react__WEBPACK_IMPORTED_MODULE_0__","factory","ref","useRef","current","displayName","__docgenInfo","description","props","STORYBOOK_REACT_CLASSES","docgenInfo","name","path","__react_docgen_typescript_loader_error","PolylineEvent","Polyline","_ref","zIndex","strokeColor","strokeWeight","strokeOpacity","_ref$visible","visible","_ref$geodesic","geodesic","_ref$clickable","clickable","_ref$draggable","draggable","onClick","onDoubleClick","onRightClick","onMouseOut","onMouseOver","onMouseMove","onMouseDown","onMouseUp","onDrag","onDragStart","onDragEnd","map","useGoogleMap","maps","useGoogleMapsAPI","options","createMVCArray","x","createLatLng","polyline","changedOptions","useChangedProps","pathRef","getPath","useEffect","setMap","setOptions","useEventHandlers","_onDragStart","apply","this","arguments","toString","_onDragEnd","_x","event","Object","assign","getArray","setPath","defaultValue","required","type","MDXContent","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","id","parentName","href","docz__WEBPACK_IMPORTED_MODULE_2__","__codesandbox","__position","__code","__scope","DocsMap","_docs_DocsComponents__WEBPACK_IMPORTED_MODULE_4__","zoom","center","lat","lng","_Polyline__WEBPACK_IMPORTED_MODULE_3__","strokeWidth","e","alert","JSON","stringify","of"],"mappings":"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","file":"static/js/polyline-docs-polyline.eb94577a.js","sourcesContent":["import { useRef } from \"react\";\n\nexport function useMemoOnce<T>(factory: () => T): T {\n  const ref = useRef<null | T>(null);\n\n  if (!ref.current) {\n    ref.current = factory();\n  }\n\n  return ref.current;\n}\ntry {\n    // @ts-ignore\n    useMemoOnce.displayName = \"useMemoOnce\";\n    // @ts-ignore\n    useMemoOnce.__docgenInfo = { \"description\": \"\", \"displayName\": \"useMemoOnce\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/internal/useMemoOnce.ts#useMemoOnce\"] = { docgenInfo: useMemoOnce.__docgenInfo, name: \"useMemoOnce\", path: \"src/internal/useMemoOnce.ts#useMemoOnce\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export enum PolylineEvent {\n  onClick = \"click\",\n  onDoubleClick = \"dblclick\",\n  onRightClick = \"rightclick\",\n  onMouseOut = \"mouseout\",\n  onMouseOver = \"mouseover\",\n  onMouseMove = \"mousemove\",\n  onMouseDown = \"mousedown\",\n  onMouseUp = \"mouseup\",\n  onDrag = \"drag\",\n  onDragStart = \"dragstart\",\n  onDragEnd = \"dragend\",\n}\n","import { useEffect, useRef } from \"react\";\n\nimport { useGoogleMap, useGoogleMapsAPI } from \"../context/GoogleMapsContext\";\nimport { createLatLng, createMVCArray } from \"../internal/MapsUtils\";\nimport { useChangedProps } from \"../internal/useChangedProps\";\nimport { useEventHandlers } from \"../internal/useEventHandlers\";\nimport { useMemoOnce } from \"../internal/useMemoOnce\";\nimport { PolylineEvent } from \"./PolylineEvent\";\n\nexport interface PolylineProps extends PolylineHandlers {\n  /**\n   * If set to true, the user can drag this shape over the map.\n   *\n   * The `geodesic` property defines the mode of dragging.\n   */\n  draggable?: boolean;\n\n  /**\n   * Indicates whether this `Polyline` handles mouse events.\n   */\n  clickable?: boolean;\n\n  /**\n   * When `true`, edges of the polygon are interpreted as geodesic and will follow the curvature of the Earth.\n   * When `false`, edges of the polygon are rendered as straight lines in screen space.\n   *\n   * Note that the shape of a geodesic polygon may appear to change when dragged,\n   * as the dimensions are maintained relative to the surface of the earth.\n   */\n  geodesic?: boolean;\n\n  /**\n   * Whether this `Polyline` is visible on the map.\n   */\n  visible?: boolean;\n\n  /**\n   * The ordered sequence of coordinates of the `Polyline`.\n   */\n  path: Array<google.maps.LatLngLiteral>;\n\n  //\n  // Style\n  //\n\n  /**\n   * The stroke color.\n   *\n   * All CSS3 colors are supported except for extended named colors.\n   */\n  strokeColor?: string;\n\n  /**\n   * The stroke opacity between 0.0 and 1.0.\n   */\n  strokeOpacity?: number;\n\n  /**\n   * The stroke width in pixels.\n   */\n  strokeWeight?: number;\n\n  /**\n   * The zIndex compared to other polys.\n   */\n  zIndex?: number;\n}\n\ninterface PolylineHandlers {\n  /**\n   * This handler is fired when the DOM `click` handlers is fired on the `Polyline`.\n   */\n  onClick?(): void;\n\n  /**\n   * This handler is fired when the DOM `dblclick` handlers is fired on the `Polyline`.\n   */\n  onDoubleClick?(): void;\n\n  /**\n   * This handler is fired when the `Polyline` is right-clicked on.\n   */\n  onRightClick?(): void;\n\n  /**\n   * This handler is fired on `mouseout` handlers is fired on `Polyline`.\n   */\n  onMouseOut?(): void;\n\n  /**\n   * This handler is fired on `mouseover` handlers is fired on `Polyline`.\n   */\n  onMouseOver?(): void;\n\n  /**\n   * This handler is fired when the DOM `mousemove` handlers is fired\n   * on `Polyline`.\n   */\n  onMouseMove?(): void;\n\n  /**\n   * This handler is fired when the DOM `mousedown` handlers is fired\n   * on `Polyline`.\n   */\n  onMouseDown?(): void;\n\n  /**\n   * This handler is fired when the DOM `mouseup` handlers is fired\n   * on `Polyline`.\n   */\n  onMouseUp?(): void;\n\n  /**\n   * This handler is repeatedly fired while the user drags the `Polyline`.\n   */\n  onDrag?(): void;\n\n  /**\n   * This handler is fired when the user starts dragging the `Polyline`.\n   */\n  onDragStart?(): void;\n\n  /**\n   * This handler is fired when the user stops dragging the `Polyline`.\n   */\n  onDragEnd?(event?: { path: Array<google.maps.LatLng> }): void;\n}\n\nexport function Polyline({\n  path,\n  zIndex,\n  strokeColor,\n  strokeWeight,\n  strokeOpacity,\n\n  visible = true,\n  geodesic = false,\n  clickable = true,\n  draggable = false,\n\n  onClick,\n  onDoubleClick,\n  onRightClick,\n  onMouseOut,\n  onMouseOver,\n  onMouseMove,\n  onMouseDown,\n  onMouseUp,\n  onDrag,\n  onDragStart,\n  onDragEnd,\n}: PolylineProps): null {\n  const map = useGoogleMap();\n  const maps = useGoogleMapsAPI();\n  const options = {\n    zIndex,\n    visible,\n    geodesic,\n    clickable,\n    draggable,\n    strokeColor,\n    strokeWeight,\n    strokeOpacity,\n    path: createMVCArray(maps, path, x => createLatLng(maps, x)),\n  };\n  const polyline = useMemoOnce(() => new maps.Polyline(options));\n  const changedOptions = useChangedProps(options);\n  const pathRef = useRef(polyline.getPath());\n\n  useEffect(() => {\n    polyline.setMap(map);\n\n    return () => {\n      polyline.setMap(null);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (changedOptions) {\n      polyline.setOptions(changedOptions);\n    }\n  }, [changedOptions]);\n\n  useEventHandlers<PolylineHandlers>(polyline, PolylineEvent, {\n    onClick,\n    onDoubleClick,\n    onRightClick,\n    onMouseOut,\n    onMouseOver,\n    onMouseMove,\n    onMouseDown,\n    onMouseUp,\n    onDrag,\n    onDragStart() {\n      pathRef.current = polyline.getPath();\n\n      if (onDragStart) {\n        onDragStart();\n      }\n    },\n    onDragEnd(event) {\n      if (event) {\n        Object.assign(event, { path: polyline.getPath().getArray() });\n      }\n\n      polyline.setPath(pathRef.current);\n\n      if (onDragEnd) {\n        onDragEnd(event);\n      }\n    },\n  });\n\n  return null;\n}\ntry {\n    // @ts-ignore\n    Polyline.displayName = \"Polyline\";\n    // @ts-ignore\n    Polyline.__docgenInfo = { \"description\": \"\", \"displayName\": \"Polyline\", \"props\": { \"draggable\": { \"defaultValue\": null, \"description\": \"If set to true, the user can drag this shape over the map.\\n\\nThe `geodesic` property defines the mode of dragging.\", \"name\": \"draggable\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"clickable\": { \"defaultValue\": null, \"description\": \"Indicates whether this `Polyline` handles mouse events.\", \"name\": \"clickable\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"geodesic\": { \"defaultValue\": null, \"description\": \"When `true`, edges of the polygon are interpreted as geodesic and will follow the curvature of the Earth.\\nWhen `false`, edges of the polygon are rendered as straight lines in screen space.\\n\\nNote that the shape of a geodesic polygon may appear to change when dragged,\\nas the dimensions are maintained relative to the surface of the earth.\", \"name\": \"geodesic\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"visible\": { \"defaultValue\": null, \"description\": \"Whether this `Polyline` is visible on the map.\", \"name\": \"visible\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"path\": { \"defaultValue\": null, \"description\": \"The ordered sequence of coordinates of the `Polyline`.\", \"name\": \"path\", \"required\": true, \"type\": { \"name\": \"LatLngLiteral[]\" } }, \"strokeColor\": { \"defaultValue\": null, \"description\": \"The stroke color.\\n\\nAll CSS3 colors are supported except for extended named colors.\", \"name\": \"strokeColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"strokeOpacity\": { \"defaultValue\": null, \"description\": \"The stroke opacity between 0.0 and 1.0.\", \"name\": \"strokeOpacity\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"strokeWeight\": { \"defaultValue\": null, \"description\": \"The stroke width in pixels.\", \"name\": \"strokeWeight\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"zIndex\": { \"defaultValue\": null, \"description\": \"The zIndex compared to other polys.\", \"name\": \"zIndex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"onClick\": { \"defaultValue\": null, \"description\": \"This handler is fired when the DOM `click` handlers is fired on the `Polyline`.\", \"name\": \"onClick\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onDoubleClick\": { \"defaultValue\": null, \"description\": \"This handler is fired when the DOM `dblclick` handlers is fired on the `Polyline`.\", \"name\": \"onDoubleClick\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onRightClick\": { \"defaultValue\": null, \"description\": \"This handler is fired when the `Polyline` is right-clicked on.\", \"name\": \"onRightClick\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onMouseOut\": { \"defaultValue\": null, \"description\": \"This handler is fired on `mouseout` handlers is fired on `Polyline`.\", \"name\": \"onMouseOut\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onMouseOver\": { \"defaultValue\": null, \"description\": \"This handler is fired on `mouseover` handlers is fired on `Polyline`.\", \"name\": \"onMouseOver\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onMouseMove\": { \"defaultValue\": null, \"description\": \"This handler is fired when the DOM `mousemove` handlers is fired\\non `Polyline`.\", \"name\": \"onMouseMove\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onMouseDown\": { \"defaultValue\": null, \"description\": \"This handler is fired when the DOM `mousedown` handlers is fired\\non `Polyline`.\", \"name\": \"onMouseDown\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onMouseUp\": { \"defaultValue\": null, \"description\": \"This handler is fired when the DOM `mouseup` handlers is fired\\non `Polyline`.\", \"name\": \"onMouseUp\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onDrag\": { \"defaultValue\": null, \"description\": \"This handler is repeatedly fired while the user drags the `Polyline`.\", \"name\": \"onDrag\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onDragStart\": { \"defaultValue\": null, \"description\": \"This handler is fired when the user starts dragging the `Polyline`.\", \"name\": \"onDragStart\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onDragEnd\": { \"defaultValue\": null, \"description\": \"This handler is fired when the user stops dragging the `Polyline`.\", \"name\": \"onDragEnd\", \"required\": false, \"type\": { \"name\": \"(event?: { path: LatLng[]; }) => void\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/polyline/Polyline.ts#Polyline\"] = { docgenInfo: Polyline.__docgenInfo, name: \"Polyline\", path: \"src/polyline/Polyline.ts#Polyline\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from \"docz\";\nimport { Polyline } from \"../Polyline\";\nimport { DocsMap } from \"../../__docs__/DocsComponents\";\n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"polyline\"}}>{`Polyline`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Draws `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`google.maps.Polyline`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Google Maps Docs:`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://developers.google.com/maps/documentation/javascript/reference#Polyline\"}}>{`google.maps.Polyline`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://developers.google.com/maps/documentation/javascript/reference#PolylineOptions\"}}>{`google.maps.PolylineOptions`}</MDXTag></MDXTag>\n</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<DocsMap zoom={8} center={{ lat: 37.33821, lng: -121.88633 }}>\\n  <Polyline\\n    visible={true}\\n    clickable={true}\\n    draggable={false}\\n    strokeColor=\\\"#FF0000\\\"\\n    strokeWidth={1}\\n    strokeOpacity={1}\\n    path={[\\n      { lat: 37.33821, lng: -121.88633 },\\n      { lat: 37.00578, lng: -121.56826 },\\n    ]}\\n    onDragEnd={e => {\\n      alert(\\n        \\\"It\\'s position will reset, path new \\'path\\' to set it\\'s new position. Position changed to: \\\" +\\n          JSON.stringify(e.path),\\n      )\\n    }}\\n  />\\n</DocsMap>'} __scope={{props: this ? this.props : props,Polyline,DocsMap}}>\n  <DocsMap zoom={8} center={{ lat: 37.33821, lng: -121.88633 }}>\n    <Polyline\n      visible={true}\n      clickable={true}\n      draggable={false}\n      strokeColor=\"#FF0000\"\n      strokeWidth={1}\n      strokeOpacity={1}\n      path={[\n        { lat: 37.33821, lng: -121.88633 },\n        { lat: 37.00578, lng: -121.56826 },\n      ]}\n      onDragEnd={e => {\n        alert(\n          \"It's position will reset, path new 'path' to set it's new position. Position changed to: \" +\n            JSON.stringify(e.path),\n        );\n      }}\n    />\n  </DocsMap>\n</Playground>\n<PropsTable of={Polyline} />\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}