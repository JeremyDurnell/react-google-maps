{"version":3,"sources":["webpack:///./src/place-autocomplete/PlaceAutocompleteEvent.ts","webpack:///./src/place-autocomplete/PlaceAutocomplete.ts","webpack:///./src/place-autocomplete/__docs__/PlaceAutocomplete.mdx"],"names":["PlaceAutocompleteEvent","PlaceAutocomplete","_ref","render","types","bounds","componentRestrictions","_ref$placeIdOnly","placeIdOnly","_ref$strictBounds","strictBounds","onPlaceChanged","maps","useGoogleMapsAPI","inputRef","useRef","_useState2","_slicedToArray","useState","autocomplete","setAutocomplete","options","useDeepCompareMemo","useEffect","places","Autocomplete","current","setValues","useEventHandlers","_onPlaceChanged","apply","this","arguments","toString","getPlace","ref","displayName","__docgenInfo","description","props","defaultValue","name","required","type","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","MDXContent","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react_default","a","createElement","dist","id","parentName","href","index_m","__codesandbox","__position","__code","__scope","DocsAPIProvider","DocsComponents","country","event","alert","JSON","stringify","of"],"mappings":"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","file":"static/js/place-autocomplete-docs-place-autocomplete.de12c9c1.js","sourcesContent":["export enum PlaceAutocompleteEvent {\n  onPlaceChanged = \"place_changed\",\n}\n","import { ReactElement, RefObject, useEffect, useRef, useState } from \"react\";\n\nimport { useGoogleMapsAPI } from \"../context/GoogleMapsContext\";\nimport { useDeepCompareMemo } from \"../internal/useDeepCompareMemo\";\nimport { useEventHandlers } from \"../internal/useEventHandlers\";\nimport { PlaceAutocompleteEvent } from \"./PlaceAutocompleteEvent\";\n\nexport interface PlaceAutocompleteRenderProps {\n  ref: RefObject<HTMLInputElement>;\n}\n\nexport interface PlaceAutocompleteProps {\n  /**\n   * The area in which to search for places.\n   */\n  bounds?: google.maps.LatLngBoundsLiteral;\n\n  /**\n   * The component restrictions. Component restrictions are used to restrict\n   * predictions to only those within the parent component.\n   */\n  componentRestrictions?: google.maps.places.ComponentRestrictions;\n\n  /**\n   * Whether to retrieve only Place IDs. The PlaceResult made available when\n   * the place_changed event is fired will only have the place_id, types and\n   * name fields, with the place_id, types and description returned by the\n   * Autocomplete service.\n   */\n  placeIdOnly?: boolean;\n\n  /**\n   * A boolean value, indicating that the Autocomplete widget should only return\n   * those places that are inside the bounds of the Autocomplete widget at the\n   * time the query is sent. Setting strictBounds to false will make the results\n   * biased towards, but not restricted to, places contained within the bounds.\n   */\n  strictBounds?: boolean;\n\n  /**\n   * The types of predictions to be returned. For a list of supported types,\n   * see the developer's guide. If nothing is specified, all types are returned.\n   * In general only a single type is allowed. The exception is that you can\n   * safely mix the 'geocode' and 'establishment' types, but note that this\n   * will have the same effect as specifying no types.\n   */\n  types?: Array<string>;\n\n  /**\n   * This event is fired when a PlaceResult is made available for a Place the\n   * user has selected. If the user enters the name of a Place that was not\n   * suggested by the control and presses the Enter key, or if a Place Details\n   * request fails, the PlaceResult contains the user input in the name\n   * property, with no other properties defined.\n   */\n  onPlaceChanged?(result: google.maps.places.PlaceResult): void;\n\n  /**\n   * Renders child component with provided input.\n   */\n  render(\n    renderProps: PlaceAutocompleteRenderProps,\n  ): null | ReactElement<object>;\n}\n\ntype Handlers = Pick<PlaceAutocompleteProps, \"onPlaceChanged\">;\n\nexport function PlaceAutocomplete({\n  render,\n  types,\n  bounds,\n  componentRestrictions,\n  placeIdOnly = false,\n  strictBounds = false,\n\n  onPlaceChanged,\n}: PlaceAutocompleteProps): null | ReactElement<object> {\n  const maps = useGoogleMapsAPI();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [\n    autocomplete,\n    setAutocomplete,\n  ] = useState<null | google.maps.places.Autocomplete>(null);\n  const options = useDeepCompareMemo(\n    () => ({\n      types,\n      bounds,\n      placeIdOnly,\n      strictBounds,\n      componentRestrictions,\n    }),\n    [types, bounds, placeIdOnly, strictBounds, componentRestrictions],\n  );\n\n  useEffect(() => {\n    setAutocomplete(new maps.places.Autocomplete(inputRef.current!));\n  }, []);\n\n  useEffect(() => {\n    if (autocomplete) {\n      autocomplete.setValues(options);\n    }\n  }, [autocomplete, options]);\n\n  useEventHandlers<Handlers>(autocomplete, PlaceAutocompleteEvent, {\n    onPlaceChanged() {\n      if (onPlaceChanged) {\n        onPlaceChanged(autocomplete!.getPlace());\n      }\n    },\n  });\n\n  return render({ ref: inputRef });\n}\ntry {\n    // @ts-ignore\n    PlaceAutocomplete.displayName = \"PlaceAutocomplete\";\n    // @ts-ignore\n    PlaceAutocomplete.__docgenInfo = { \"description\": \"\", \"displayName\": \"PlaceAutocomplete\", \"props\": { \"bounds\": { \"defaultValue\": null, \"description\": \"The area in which to search for places.\", \"name\": \"bounds\", \"required\": false, \"type\": { \"name\": \"LatLngBoundsLiteral\" } }, \"componentRestrictions\": { \"defaultValue\": null, \"description\": \"The component restrictions. Component restrictions are used to restrict\\npredictions to only those within the parent component.\", \"name\": \"componentRestrictions\", \"required\": false, \"type\": { \"name\": \"ComponentRestrictions\" } }, \"placeIdOnly\": { \"defaultValue\": null, \"description\": \"Whether to retrieve only Place IDs. The PlaceResult made available when\\nthe place_changed event is fired will only have the place_id, types and\\nname fields, with the place_id, types and description returned by the\\nAutocomplete service.\", \"name\": \"placeIdOnly\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"strictBounds\": { \"defaultValue\": null, \"description\": \"A boolean value, indicating that the Autocomplete widget should only return\\nthose places that are inside the bounds of the Autocomplete widget at the\\ntime the query is sent. Setting strictBounds to false will make the results\\nbiased towards, but not restricted to, places contained within the bounds.\", \"name\": \"strictBounds\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"types\": { \"defaultValue\": null, \"description\": \"The types of predictions to be returned. For a list of supported types,\\nsee the developer's guide. If nothing is specified, all types are returned.\\nIn general only a single type is allowed. The exception is that you can\\nsafely mix the 'geocode' and 'establishment' types, but note that this\\nwill have the same effect as specifying no types.\", \"name\": \"types\", \"required\": false, \"type\": { \"name\": \"string[]\" } }, \"onPlaceChanged\": { \"defaultValue\": null, \"description\": \"This event is fired when a PlaceResult is made available for a Place the\\nuser has selected. If the user enters the name of a Place that was not\\nsuggested by the control and presses the Enter key, or if a Place Details\\nrequest fails, the PlaceResult contains the user input in the name\\nproperty, with no other properties defined.\", \"name\": \"onPlaceChanged\", \"required\": false, \"type\": { \"name\": \"(result: PlaceResult) => void\" } }, \"render\": { \"defaultValue\": null, \"description\": \"Renders child component with provided input.\", \"name\": \"render\", \"required\": true, \"type\": { \"name\": \"(renderProps: PlaceAutocompleteRenderProps) => ReactElement<object>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/place-autocomplete/PlaceAutocomplete.ts#PlaceAutocomplete\"] = { docgenInfo: PlaceAutocomplete.__docgenInfo, name: \"PlaceAutocomplete\", path: \"src/place-autocomplete/PlaceAutocomplete.ts#PlaceAutocomplete\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from \"docz\";\nimport { PlaceAutocomplete } from \"../PlaceAutocomplete\";\nimport { DocsAPIProvider } from \"../../__docs__/DocsComponents\";\n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"place-autocomplete\"}}>{`Place Autocomplete`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Attaches place autocomplete to input.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Google Maps Docs:`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://developers.google.com/maps/documentation/javascript/reference/places-service#PlaceResult\"}}>{`google.maps.places.PlaceResult`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://developers.google.com/maps/documentation/javascript/reference/places-widget#Autocomplete\"}}>{`google.maps.places.Autocomplete`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://developers.google.com/maps/documentation/javascript/reference/places-widget#AutocompleteOptions\"}}>{`google.maps.places.AutocompleteOptions`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#ComponentRestrictions\"}}>{`google.maps.places.ComponentRestrictions`}</MDXTag></MDXTag>\n</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<DocsAPIProvider>\\n  <PlaceAutocomplete\\n    placeIdOnly={true}\\n    strictBounds={true}\\n    types={[\\'geocode\\']}\\n    componentRestrictions={{ country: \\'USA\\' }}\\n    onPlaceChanged={event => {\\n      alert(JSON.stringify(event, null, 2))\\n    }}\\n    render={({ ref }) => <input ref={ref} type=\\\"text\\\" />}\\n  />\\n</DocsAPIProvider>'} __scope={{props: this ? this.props : props,PlaceAutocomplete,DocsAPIProvider}}>\n  <DocsAPIProvider>\n    <PlaceAutocomplete\n      placeIdOnly={true}\n      strictBounds={true}\n      types={[\"geocode\"]}\n      componentRestrictions={{ country: \"USA\" }}\n      onPlaceChanged={event => {\n        alert(JSON.stringify(event, null, 2));\n      }}\n      render={({ ref }) => <input ref={ref} type=\"text\" />}\n    />\n  </DocsAPIProvider>\n</Playground>\n<PropsTable of={PlaceAutocomplete} />\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}